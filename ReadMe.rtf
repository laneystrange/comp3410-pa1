{\rtf1\ansi\ansicpg1252\cocoartf1344\cocoasubrtf720
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red52\green110\blue183;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid1\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}}{\leveltext\leveltemplateid101\'01\'00;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
COMP3410 Spring2015 Programming Assignment #1 Assigned: 4 February, 2015 Deadline: 11 February, 2015\
GITHUB SUBMISSION GUIDELINES 1. Fork the assignment repository. 2. Update your work in your own branch regularly. 3. Create one .asm file for each part below (except part zero) 4. When you're ready to turn it in (i.e., your code is perfect and tested), submit a pull request to the original branch. 5. In your README file, provide a description of all the ways you've tested your code and the output that you saw. For example, for Part Two, you should include a summary of what you saw on the screen when you ran your program, something like this:\
Hello! This is PA#1 for COMP3410 and I am Elena Strange. Enter an integer: 4 Enter another integer: 8 Sum: 12 Difference: -4 Product: 32 Thanks for playing! Goodbye.\
PART ZERO. (0 points).\
Download and install MARS: {\field{\*\fldinst{HYPERLINK "http://courses.missouristate.edu/KenVollmar/MARS/download.htm"}}{\fldrslt \cf3 \expnd0\expndtw0\kerning0
http://courses.missouristate.edu/KenVollmar/MARS/download.htm}}\
We'll go over many of the MIPS instructions in class, but our textbook is a good resource when you need help with syntax or getting access to all the instrutions possible. Appendix A has a lot of information, and there is a MIPS cheat-sheet in green paper in the very front.\
Another MIPS resource: {\field{\*\fldinst{HYPERLINK "http://www2.engr.arizona.edu/%7Eece369/Resources/spim/MIPSReference.pdf"}}{\fldrslt \cf3 \expnd0\expndtw0\kerning0
http://www2.engr.arizona.edu/~ece369/Resources/spim/MIPSReference.pdf}}\
\pard\pardeftab720

\b\fs72 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
PART ONE. 30 points.\
First, we'll get familiar with MARS and Assembly by working with an existing source code file. Retrieve the fibonacci.asm file from the GitHub repo.\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Load it into MARS and run the program. \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Modify fibonacci.asm so that, instead of always printing 9 Fibonacci numbers, it prompts the user how many numbers to print. (You can do this by keeping the array the same size, and limiting the user to input sizes only up to 9.)\
\pard\tx720\pardeftab720
\cf2 Results:\
Enter the size of the array to print: 9\
The Fibonacci numbers are:\
1 1 2 3 5 8 13 21 34 \
-- program is finished running --\
\pard\pardeftab720

\b\fs72 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
PART TWO. 40 points.\
Write a MIPS Assembly program that performs the following tasks, in order:\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0\cf2 \kerning1\expnd0\expndtw0 {\listtext	1	}\expnd0\expndtw0\kerning0
Print an introduction that includes: your name, a title, and a brief description of the program.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	2	}\expnd0\expndtw0\kerning0
Prompt the user for two numbers and save them in two different registers.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	3	}\expnd0\expndtw0\kerning0
Perform 3 calculations (sum, difference, product) using these two numbers, and save each result in data memory.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	4	}\expnd0\expndtw0\kerning0
For each computed result, retrieve it from memory and print it to the terminal.\
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	5	}\expnd0\expndtw0\kerning0
Print a concluding message and exit.\
\pard\tx720\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
\
Results:\
Hello. My name is Will Robb. This program is an awesome calculator. It will add, subtract, and multiply two numbers you enter. \
Please enter an int: 1\
Please enter another int: 2\
The sum is: 3\
The difference is: -1\
The product is: 2\
Thats it! Goodbye!\
-- program is finished running --\
\pard\pardeftab720

\b\fs72 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
PART THREE. 30 points.\
Write a MIPS Assembly program that performs the following task:\
Calculate the sum of the odd integers between 1 and 15, inclusive. (You may use a MIPS version of a while-loop to complete this task.)\
Store each partial sum in memory as you go. I.e., store 1+3=5 in memory. Then store that result plus the next odd number (5+5=10, then 10+7=17), and so on.\
Load the final result into a register and print the result to the terminal.\
\
Result:\
64\
-- program is finished running --}